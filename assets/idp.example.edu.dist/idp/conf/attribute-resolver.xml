<?xml version="1.0" encoding="UTF-8"?>
<AttributeResolver
        xmlns="urn:mace:shibboleth:2.0:resolver" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xmlns:aaf="urn:mace:aaf.edu.au:shibboleth:2.0:resolver"
        xsi:schemaLocation="urn:mace:shibboleth:2.0:resolver http://shibboleth.net/schema/idp/shibboleth-attribute-resolver.xsd
                            urn:mace:aaf.edu.au:shibboleth:2.0:resolver classpath:/schema/aaf-shibv5-ext.xsd">


    <!-- ========================================== -->
    <!--         The User's ID - UID                -->
    <!-- ========================================== -->

    <!-- Option 1: Using the subject's canonicalized principal name -->
    <AttributeDefinition id="uid" xsi:type="PrincipalName" />

    <!-- Option 2: From the user's UID attribute in the directory -->
    <!--
    <AttributeDefinition id="uid" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="uid" />
    </AttributeDefinition>
    -->

    <!-- Option 3: From the user's sAMAccountName in Active Directory -->
    <!--
    <AttributeDefinition id="uid" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="sAMAccountName" />
    </AttributeDefinition>
    -->

    <!-- ========================================== -->
    <!--         AAF CORE ATTRIBUTES                -->
    <!-- ========================================== -->

    <!-- auEduPersonSharedToken -->
    <AttributeDefinition id="auEduPersonSharedToken" xsi:type="Simple">
        <InputDataConnector ref="sharedToken" attributeNames="auEduPersonSharedToken" />
    </AttributeDefinition>

    <!-- displayName -->
    <AttributeDefinition id="displayName" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="displayName" />
    </AttributeDefinition>

    <!-- eduPersonAffiliation -->
    <AttributeDefinition xsi:type="ScriptedAttribute" id="eduPersonAffiliation">
        <InputDataConnector ref="ldap" attributeNames="eduPersonAffiliation" />
        <InputDataConnector ref="staticAttributes" attributeNames="affiliationValues" />
        <Script><![CDATA[
            var HashSet = Java.type("java.util.HashSet");
            var newAffiliations = new HashSet();

            var values = affiliationValues.getValues();

            if (typeof eduPersonAffiliation != "undefined") {
                for ( i = 0; i < eduPersonAffiliation.getValues().size(); i++){
                    value = eduPersonAffiliation.getValues().get(i).toLowerCase();
                    if (values.contains(value)) {
                        newAffiliations.add(value);
                    }
                }
            }

            if (newAffiliations.contains("student") ||
                newAffiliations.contains("faculty") ||
                newAffiliations.contains("staff") ||
                newAffiliations.contains("employee")) {
                    newAffiliations.add("member");
            }

            if (newAffiliations.size() < 1) {
                newAffiliations.add("affiliate");
            }

            eduPersonAffiliation.getValues().clear();

            itr = newAffiliations.iterator();
            while(itr.hasNext()){
               eduPersonAffiliation.addValue(itr.next());
            }
        ]]></Script>
    </AttributeDefinition>

    <!-- eduPersonAssurance -->
    <AttributeDefinition id="eduPersonAssurance" xsi:type="ScriptedAttribute">
        <InputDataConnector ref="ldap" attributeNames="eduPersonAssurance" />
        <InputDataConnector ref="staticAttributes" attributeNames="refedsAssuranceFramework" />
        <Script><![CDATA[
            var HashSet = Java.type("java.util.HashSet");
            var assurances = new HashSet();
            var refedsValues = refedsAssuranceFramework.getValues();

            {% if refeds_baseline_idp_v1 == "false" or refeds_assurance_v2 == "false" %}
               // Remove all REFEDS Assurance values prefixed as this IdP
               // does not meet the Conformance criteria.
               for ( i = 0; i < eduPersonAssurance.getValues().size(); i++){
                  value = eduPersonAssurance.getValues().get(i);
                  if (!refedsValues.contains(value))
                  {
                      assurances.add(value);
                  }
               }
            {% else %}
               // Process the values
               for ( i = 0; i < eduPersonAssurance.getValues().size(); i++){
                  value = eduPersonAssurance.getValues().get(i);
                  if (refedsValues.contains(value))
                  {
                      assurances.add(value);
                  }
               }
               // Indicate REFEDS RAF is supportted by this IdP
               assurances.add("https://refeds.org/assurance");

               {% if  refeds_assurance_v2 == "true" %}
               // REFEDS RAF Version 2 in use
               assurances.add("https://refeds.org/assurance/version/2");
               {% endif %}

               {% if refeds_raf_unique == "true" %}
               // Identifier uniqueness criteria are meet
               assurances.add("https://refeds.org/assurance/ID/unique");
               {% endif %}

               {% if refeds_raf_eppn_unique == "no-reassign" or refeds_raf_eppn_unique == "reassign-1y" %}
               // Set the eppn-unique value
               assurances.add("https://refeds.org/assurance/ID/eppn-unique-{{ refeds_raf_eppn_unique }}");
               {% endif %}

               // Enaure IAP/high also have IAP/medium
               if (assurances.contains("https://refeds.org/assurance/IAP/high")) {
                  assurances.add("https://refeds.org/assurance/IAP/medium");
               }

               // Ensure IAP/medium also has IAP/low
               if (assurances.contains("https://refeds.org/assurance/IAP/medium")) {
                  assurances.add("https://refeds.org/assurance/IAP/low");
               }

               {% if refeds_raf_epa == "1m" or refeds_raf_epa == "1d" %}
               // Set raf freshness
               assurances.add("https://refeds.org/assurance/ATP/ePA-{{ refeds_raf_epa }}");
               {% endif %}

               // Ensure ATP/ePA-1d also has ATP/ePA-1m
               if (assurances.contains("https://refeds.org/assurance/ATP/ePA-1d")) {
                  assurances.add("https://refeds.org/assurance/ATP/ePA-1m");
               }

               // Set Cappuccino
               if (assurances.contains("https://refeds.org/assurance") &&
                   assurances.contains("https://refeds.org/assurance/ID/unique") &&
                   assurances.contains("https://refeds.org/assurance/IAP/low") &&
                   assurances.contains("https://refeds.org/assurance/IAP/medium") &&
                   assurances.contains("https://refeds.org/assurance/ATP/ePA-1m")) {
                  assurances.add("https://refeds.org/assurance/profile/cappuccino");
               } else {
                   assurances.remove("https://refeds.org/assurance/profile/cappuccino");
               }

               // Set Espresso
               if (assurances.contains("https://refeds.org/assurance/profile/cappuccino") &&
                   assurances.contains("https://refeds.org/assurance/IAP/high")) {
                  assurances.add("https://refeds.org/assurance/profile/espresso");
               } else {
                  assurances.remove("https://refeds.org/assurance/profile/espresso");
               }

            {% endif %}

            eduPersonAssurance.getValues().clear();

            itr = assurances.iterator();
            while (itr.hasNext()){
                eduPersonAssurance.addValue(itr.next());
            }
        ]]></Script>
    </AttributeDefinition>

    <!-- eduPersonEntitlement -->
    <AttributeDefinition id="eduPersonEntitlement" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="eduPersonEntitlement" />
    </AttributeDefinition>

    <!-- eduPersonPrincipalName -->
    
    <!-- Option 1: Appending the organisations scope to the user's UID -->
    <AttributeDefinition id="eduPersonPrincipalName" xsi:type="Scoped" scope="%{idp.scope}">
        <InputAttributeDefinition ref="uid" />
    </AttributeDefinition>

    <!-- Option 2: From value in LDAP -->
    <!--           Note: The domain name suffix MUST match the scope value -->
    <!--                 assigned to the IdP (in the IdPs Scope value in the metadata -->
    <!-- 
    <AttributeDefinition id="eduPersonPrincipalName" xsi:type="Prescoped">
        <InputDataConnector ref="ldap" attributeNames="eduPersonPrincipalName" />
    </AttributeDefinition>
    -->

    <!-- eduPersonScopedAffiliation -->

    <AttributeDefinition xsi:type="Scoped" id="eduPersonScopedAffiliation" scope="%{idp.scope}">
        <InputAttributeDefinition ref="eduPersonAffiliation" />
    </AttributeDefinition>

    <!-- eduPersonTargetedID -->

    <!-- NOTE: Plans are underway to deprecate the use of this Attribute within the AAF during 2024.
         Services in eduGAIN may still require it, so it will be maintained beyond 2024 as long 
         as the Shibboleth IdP continues to support it. The IdP Warning logs will flag SAML2NameID 
         as DEPRECATED because of this attribute -->

    <AttributeDefinition xsi:type="SAML2NameID" id="eduPersonTargetedID"
    nameIdFormat="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">
        <InputDataConnector ref="StoredIDConnector" attributeNames="StoredID" />
        <AttributeEncoder xsi:type="SAML1XMLObject" name="urn:oid:1.3.6.1.4.1.5923.1.1.1.10"/>
        <AttributeEncoder xsi:type="SAML2XMLObject" name="urn:oid:1.3.6.1.4.1.5923.1.1.1.10" friendlyName="eduPersonTargetedID"/>
    </AttributeDefinition>

    <!-- mail -->
    <AttributeDefinition id="mail" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="mail" />
    </AttributeDefinition>

    <!-- givenName -->
    <AttributeDefinition id="givenName" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="givenName" />
    </AttributeDefinition>

    <!-- sn (surname) -->
    <AttributeDefinition id="sn" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="sn" />
    </AttributeDefinition>

    <!-- eduPersonOrcid -->
    <AttributeDefinition id="eduPersonOrcid" xsi:type="Simple">
       <InputDataConnector ref="ldap" attributeNames="eduPersonOrcid" />
    </AttributeDefinition>

    <!-- ========================================== -->
    <!--     AAF improtant Optional ATTRIBUTES       -->
    <!-- ========================================== -->

    <!-- dsdStudentId - Used by myEquals -->
    <AttributeDefinition xsi:type="Simple" id="dsdStudentId">
        <InputDataConnector ref="ldap" attributeNames="studentNumber" />
    </AttributeDefinition>

    <!-- cn (commonName) - Previously a CORE attribute, still used by many services -->
    <!--                   Note: Script is used to ensure cn is of the correct format -->
    <!--                         for the AAF. "FirstName SPACE Surname". -->

    <AttributeDefinition xsi:type="ScriptedAttribute" id="cn">
        <InputAttributeDefinition ref="givenName" />
        <InputAttributeDefinition ref="sn" />
        <Script><![CDATA[

            cn.getValues().clear();

            var hyphenatedGN = null;
            var hyphenatedSN = null;

            if (typeof givenName != "undefined" && givenName != null && givenName.getValues().size() > 0) {
                hyphenatedGN = givenName.getValues().get(0).replace(/ /g, '-');
            }

            if (typeof sn != "undefined" && sn != null && sn.getValues().size() > 0) {
                hyphenatedSN = sn.getValues().get(0).replace(/ /g, '-');
            }

            cn.getValues().add([hyphenatedGN, hyphenatedSN].join(' '));

            ]]>
        </Script>
    </AttributeDefinition>

{% if source_persistent_id != "" %}
    <!-- ========================================== -->
    <!-- SAML Subject ID Attributes                 -->
    <!-- ========================================== -->

    <AttributeDefinition xsi:type="ScriptedAttribute" id="samlSubjectID">
        <InputDataConnector ref="ldap" attributeNames="%{idp.newPersistentId.sourceAttribute}"/>
    <Script><![CDATA[
        scopedValueType =  Java.type("net.shibboleth.idp.attribute.ScopedStringAttributeValue");

        samlSubjectID.addValue(new scopedValueType(%{idp.persistentId.sourceAttribute}.getValues().get(0).toLowerCase(), "%{idp.scope}"));
    ]]></Script>

    </AttributeDefinition>

    <AttributeDefinition xsi:type="Scoped" id="samlPairwiseID" scope="%{idp.scope}">
        <InputDataConnector ref="computed" attributeNames="computedId"/>
    </AttributeDefinition>
{% endif %}

    
    <!-- ========================================== -->
    <!--      Data Connectors                       -->
    <!-- ========================================== -->

    <DataConnector id="staticAttributes" xsi:type="Static" 
                   exportAttributes="schacHomeOrganization schacHomeOrganizationType o">
        <Attribute id="schacHomeOrganization">
            <Value>{{ home_organisation }}</Value>
        </Attribute>
        <Attribute id="schacHomeOrganizationType">
            <Value>{{ home_organisation_type }}</Value>
        </Attribute>
        <Attribute id="o">
            <Value>{{ organisation_name }}</Value>
        </Attribute>
        <!-- Approved eduPersonAffiliation values -->
        <Attribute id="affiliationValues">
            <Value>student</Value>
            <Value>faculty</Value>
            <Value>staff</Value>
            <Value>employee</Value>
            <Value>affiliate</Value>
            <Value>alum</Value>
            <Value>member</Value>
            <Value>library-walk-in</Value>
        </Attribute>
        <!-- REFEDS Assurance Framework static value, used in conjunction with 
             scripted attribute filteredEduPersonAssurance -->
        <Attribute id="refedsAssuranceFramework">
            <Value>https://refeds.org/assurance</Value>
            <Value>https://refeds.org/assurance/ID/unique</Value>
            <Value>https://refeds.org/assurance/ID/eppn-unique-no-reassign</Value>
            <Value>https://refeds.org/assurance/ID/eppn-unique-reassign-1y</Value>
            <Value>https://refeds.org/assurance/IAP/local-enterprise</Value>
            <Value>https://refeds.org/assurance/IAP/low</Value>
            <Value>https://refeds.org/assurance/IAP/medium</Value>
            <Value>https://refeds.org/assurance/IAP/high</Value>
            <Value>https://refeds.org/assurance/ATP/ePA-1d</Value>
            <Value>https://refeds.org/assurance/ATP/ePA-1m</Value>
            <Value>https://refeds.org/assurance/profile/cappuccino</Value>
            <Value>https://refeds.org/assurance/profile/espresso</Value>
            <Value>https://refeds.org/assurance/version/2</Value>
        </Attribute>
    </DataConnector>

    <DataConnector id="ldap" xsi:type="LDAPDirectory"
        ldapURL="%{idp.attribute.resolver.LDAP.ldapURL}"
        baseDN="%{idp.attribute.resolver.LDAP.baseDN}"
        principal="%{idp.attribute.resolver.LDAP.bindDN}"
        principalCredential="%{idp.attribute.resolver.LDAP.bindDNCredential}"
        useStartTLS="%{idp.attribute.resolver.LDAP.useStartTLS:true}"
        connectTimeout="%{idp.attribute.resolver.LDAP.connectTimeout}"
        responseTimeout="%{idp.attribute.resolver.LDAP.responseTimeout}">
        <FilterTemplate>
            <![CDATA[
                %{idp.attribute.resolver.LDAP.searchFilter}
            ]]>
        </FilterTemplate>
        <ConnectionPool
            minPoolSize="%{idp.pool.LDAP.minSize:3}"
            maxPoolSize="%{idp.pool.LDAP.maxSize:10}"
            blockWaitTime="%{idp.pool.LDAP.blockWaitTime:PT3S}"
            validatePeriodically="%{idp.pool.LDAP.validatePeriodically:true}"
            validateTimerPeriod="%{idp.pool.LDAP.validatePeriod:PT5M}"
            validateDN="%{idp.pool.LDAP.validateDN:}"
            validateFilter="%{idp.pool.LDAP.validateFilter:(objectClass=*)}"
            expirationTime="%{idp.pool.LDAP.idleTime:PT10M}"/>
    </DataConnector>

    <DataConnector id="StoredIDConnector" xsi:type="StoredId" 
        generatedAttributeID="StoredID"
        salt="%{idp.persistentId.salt}" >
        <InputAttributeDefinition ref="%{idp.persistentId.sourceAttribute}" />
        <BeanManagedConnection>shibboleth.JPAStorageService.PersistentDataSource</BeanManagedConnection>
    </DataConnector>

    <DataConnector xsi:type="aaf:SharedToken" 
        id="sharedToken"
        salt="%{idp.aepst.salt}" >
        <InputAttributeDefinition ref="%{idp.persistentId.sourceAttribute}" />
        <aaf:BeanManagedConnection>shibboleth.JPAStorageService.DataSource</aaf:BeanManagedConnection>
    </DataConnector>

    <DataConnector id="computed" xsi:type="ComputedId"
            generatedAttributeID="computedId"
            salt="%{idp.persistentId.salt}"
            algorithm="%{idp.persistentId.algorithm:SHA}"
        encoding="BASE32">

        <InputDataConnector ref="ldap" attributeNames="%{idp.newPersistentId.sourceAttribute}" />
    </DataConnector>

</AttributeResolver>
